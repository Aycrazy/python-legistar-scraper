import logging
dir(logging)
logging.LEVEL
logging.basicConfig(level=logging.INFO)
logging.debug("COW")
logging.critical("COW")
import lxml.html
lxml.html.parse
lxml.html.parse('advanced_search.html')
import re
re.findall(r'\\\\u\d+', """\\u002710\\u0027"},{"value":"M.mtText2|\\u00279\\u0027"},{"value":"M.mtText2|\\u00278\\u0027"},{"value":"M.mtText2|\\u00277\\u0027"},{"value":"M.mtText2|\\u00276\\u0027"},{"value":"M.mtText2|\\u00275\\u0027"},{"value":"2014"},{"value":"2013"},{"val""")
re.findall(r'\\u\d+', """\\u002710\\u0027"},{"value":"M.mtText2|\\u00279\\u0027"},{"value":"M.mtText2|\\u00278\\u0027"},{"value":"M.mtText2|\\u00277\\u0027"},{"value":"M.mtText2|\\u00276\\u0027"},{"value":"M.mtText2|\\u00275\\u0027"},{"value":"2014"},{"value":"2013"},{"val""")
from rexlex.log_config as x
import rexlex.log_config as x
x.LOG_MSG_MAXWIDTH
b'asdfasadf'.decode('bytes')
b'asdfasadf'.decode()
b'asdfasadf'.decode('ascii')
class B: pass
type(B)
type(B)()
type(B())
type(B)
import types
isinstance(B, B)
isinstance(B(), B)
dir(types)
isinstance(B, types.ClassType)
isinstance(B(), types.ClassType)
from libmproxy.flow import FlowReader
from libmproxy.flows import FlowReader
import libmproxy
import requests
import lxml.html
x = requests.get("https://chicago.legistar.com/Calendar.aspx")
x
doc = lxml.html.fromstring(x.text)
doc.xpath('//script')
doc.xpath('//script[contains(@src, "System.Web.Extensions")]')
doc.xpath('//script[contains(@src, "System.Web.Extensions")]/@src')
doc.xpath('string(//script[contains(@src, "System.Web.Extensions")]/@src)')
url = doc.xpath('string(//script[contains(@src, "System.Web.Extensions")]/@src)')
from urllib import parse
parse.urlparse(url)
parse.parse_qsl(parse.urlparse(url).query)
x = dict(parse.parse_qsl(parse.urlparse(url).query))
x
pp(x)
x = parse.parse_qs(parse.urlparse(url).query)
x
pp parse.parse_qsl(parse.urlparse(url).query)
pp(parse.parse_qsl(parse.urlparse(url).query))
pp(parse.parse_qs(parse.urlparse(url).query))
x = parse.parse_qs(parse.urlparse(url).query)
from urllib3.response import HttpHeadersDict
import requests
from urllib3.response import HttpHeadersDict
from urllib3.response import HttpHeaderDict
from urllib3.response import HTTPHeaderDict
x
xx = HTTPHeaderDict(x)
xx
dir(HTTPHeaderDict)
x
x['_TSM_HiddenField_']
x['_TSM_HiddenField_'][0]
x['_TSM_CombinedScripts_']
from collections import ChainMap
from collections import ChainMap as x
xx = x({1: 2})
xxx = xx.new_child()
1 in xxx
del xxx[1]
1 in xxx.map
1 in xxx.m
dir(xxx)
x.
xxx.maps
xxx._abc_negative_cache
f = open('bee', 'w')
dir(f)
